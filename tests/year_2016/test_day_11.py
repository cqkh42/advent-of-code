# import numpy as np
# import pytest
#
# from aoc_cqkh42.year_2016.day_11 import Node, Solution
#
# states = [
#     Node(np.array([1, 2]), np.array([0, 0]), 0, 0),
#     Node(np.array([1, 2]), np.array([1, 0]), 1, 1),
#     Node(np.array([2, 2]), np.array([2, 0]), 2, 2),
#     Node(np.array([2, 2]), np.array([1, 0]), 1, 3),
#     Node(np.array([2, 2]), np.array([0, 0]), 0, 4),
#     Node(np.array([2, 2]), np.array([1, 1]), 1, 5),
#     Node(np.array([2, 2]), np.array([2, 2]), 2, 6),
#     Node(np.array([2, 2]), np.array([3, 3]), 3, 7),
#     Node(np.array([2, 2]), np.array([2, 3]), 2, 8),
#     Node(np.array([3, 3]), np.array([2, 3]), 3, 9),
#     Node(np.array([3, 3]), np.array([2, 2]), 2, 10),
#     Node(np.array([3, 3]), np.array([3, 3]), 3, 11)
# ]
#
# valid_states = [
#     # generators, chips
#     Node((0, 0), (0, 0), 0, 0),
#     Node((0, 0), (0, 1), 0, 0),
#     Node((0, 0), (1, 1), 0, 0),
#     Node((0, 0), (1, 2), 0, 0),
#
#     ((0, 1), (0, 0)),
#     ((0, 1), (0, 1)),
#     ((0, 1), (0, 2)),
#     ((0, 1), (0, 3)),
#     ((0, 1), (1, 0)),
#     ((0, 1), (1, 1)),
#     ((0, 1), (1, 2)),
#     ((0, 1), (1, 3)),
#     ((0, 1), (2, 0)),
#     ((0, 1), (2, 1)),
#     ((0, 1), (2, 2)),
#     ((0, 1), (2, 3)),
#     ((0, 1), (3, 0)),
#     ((0, 1), (3, 1)),
#     ((0, 1), (3, 2)),
#     ((0, 1), (3, 3)),
#     ((0, 2), (0, 0)),
#     ((0, 2), (0, 1)),
#     ((0, 2), (0, 2)),
#     ((0, 2), (0, 3)),
#     ((0, 2), (1, 0)),
#     ((0, 2), (1, 1)),
#     ((0, 2), (1, 2)),
#     ((0, 2), (1, 3)), ((0, 2), (2, 0)), ((0, 2), (2, 1)), ((0, 2), (2, 2)), ((0, 2), (2, 3)), ((0, 2), (3, 0)), ((0, 2), (3, 1)), ((0, 2), (3, 2)), ((0, 2), (3, 3)), ((0, 3), (0, 0)), ((0, 3), (0, 1)), ((0, 3), (0, 2)), ((0, 3), (0, 3)), ((0, 3), (1, 0)), ((0, 3), (1, 1)), ((0, 3), (1, 2)), ((0, 3), (1, 3)), ((0, 3), (2, 0)), ((0, 3), (2, 1)), ((0, 3), (2, 2)), ((0, 3), (2, 3)), ((0, 3), (3, 0)), ((0, 3), (3, 1)), ((0, 3), (3, 2)), ((0, 3), (3, 3)), ((1, 0), (0, 0)), ((1, 0), (0, 1)), ((1, 0), (0, 2)), ((1, 0), (0, 3)), ((1, 0), (1, 0)), ((1, 0), (1, 1)), ((1, 0), (1, 2)), ((1, 0), (1, 3)), ((1, 0), (2, 0)), ((1, 0), (2, 1)), ((1, 0), (2, 2)), ((1, 0), (2, 3)), ((1, 0), (3, 0)), ((1, 0), (3, 1)), ((1, 0), (3, 2)), ((1, 0), (3, 3)), ((1, 1), (0, 0)), ((1, 1), (0, 1)), ((1, 1), (0, 2)), ((1, 1), (0, 3)), ((1, 1), (1, 0)), ((1, 1), (1, 1)), ((1, 1), (1, 2)), ((1, 1), (1, 3)), ((1, 1), (2, 0)), ((1, 1), (2, 1)), ((1, 1), (2, 2)), ((1, 1), (2, 3)), ((1, 1), (3, 0)), ((1, 1), (3, 1)), ((1, 1), (3, 2)), ((1, 1), (3, 3)), ((1, 2), (0, 0)), ((1, 2), (0, 1)), ((1, 2), (0, 2)), ((1, 2), (0, 3)), ((1, 2), (1, 0)), ((1, 2), (1, 1)), ((1, 2), (1, 2)), ((1, 2), (1, 3)), ((1, 2), (2, 0)), ((1, 2), (2, 1)), ((1, 2), (2, 2)), ((1, 2), (2, 3)), ((1, 2), (3, 0)), ((1, 2), (3, 1)), ((1, 2), (3, 2)), ((1, 2), (3, 3)), ((1, 3), (0, 0)), ((1, 3), (0, 1)), ((1, 3), (0, 2)), ((1, 3), (0, 3)), ((1, 3), (1, 0)), ((1, 3), (1, 1)), ((1, 3), (1, 2)), ((1, 3), (1, 3)), ((1, 3), (2, 0)), ((1, 3), (2, 1)), ((1, 3), (2, 2)), ((1, 3), (2, 3)), ((1, 3), (3, 0)), ((1, 3), (3, 1)), ((1, 3), (3, 2)), ((1, 3), (3, 3)), ((2, 0), (0, 0)), ((2, 0), (0, 1)), ((2, 0), (0, 2)), ((2, 0), (0, 3)), ((2, 0), (1, 0)), ((2, 0), (1, 1)), ((2, 0), (1, 2)), ((2, 0), (1, 3)), ((2, 0), (2, 0)), ((2, 0), (2, 1)), ((2, 0), (2, 2)), ((2, 0), (2, 3)), ((2, 0), (3, 0)), ((2, 0), (3, 1)), ((2, 0), (3, 2)), ((2, 0), (3, 3)), ((2, 1), (0, 0)), ((2, 1), (0, 1)), ((2, 1), (0, 2)), ((2, 1), (0, 3)), ((2, 1), (1, 0)), ((2, 1), (1, 1)), ((2, 1), (1, 2)), ((2, 1), (1, 3)), ((2, 1), (2, 0)), ((2, 1), (2, 1)), ((2, 1), (2, 2)), ((2, 1), (2, 3)), ((2, 1), (3, 0)), ((2, 1), (3, 1)), ((2, 1), (3, 2)), ((2, 1), (3, 3)), ((2, 2), (0, 0)), ((2, 2), (0, 1)), ((2, 2), (0, 2)), ((2, 2), (0, 3)), ((2, 2), (1, 0)), ((2, 2), (1, 1)), ((2, 2), (1, 2)), ((2, 2), (1, 3)), ((2, 2), (2, 0)), ((2, 2), (2, 1)), ((2, 2), (2, 2)), ((2, 2), (2, 3)), ((2, 2), (3, 0)), ((2, 2), (3, 1)), ((2, 2), (3, 2)), ((2, 2), (3, 3)), ((2, 3), (0, 0)), ((2, 3), (0, 1)), ((2, 3), (0, 2)), ((2, 3), (0, 3)), ((2, 3), (1, 0)), ((2, 3), (1, 1)), ((2, 3), (1, 2)), ((2, 3), (1, 3)), ((2, 3), (2, 0)), ((2, 3), (2, 1)), ((2, 3), (2, 2)), ((2, 3), (2, 3)), ((2, 3), (3, 0)), ((2, 3), (3, 1)), ((2, 3), (3, 2)), ((2, 3), (3, 3)), ((3, 0), (0, 0)), ((3, 0), (0, 1)), ((3, 0), (0, 2)), ((3, 0), (0, 3)), ((3, 0), (1, 0)), ((3, 0), (1, 1)), ((3, 0), (1, 2)), ((3, 0), (1, 3)), ((3, 0), (2, 0)), ((3, 0), (2, 1)), ((3, 0), (2, 2)), ((3, 0), (2, 3)), ((3, 0), (3, 0)), ((3, 0), (3, 1)), ((3, 0), (3, 2)), ((3, 0), (3, 3)), ((3, 1), (0, 0)), ((3, 1), (0, 1)), ((3, 1), (0, 2)), ((3, 1), (0, 3)), ((3, 1), (1, 0)), ((3, 1), (1, 1)), ((3, 1), (1, 2)), ((3, 1), (1, 3)), ((3, 1), (2, 0)), ((3, 1), (2, 1)), ((3, 1), (2, 2)), ((3, 1), (2, 3)), ((3, 1), (3, 0)), ((3, 1), (3, 1)), ((3, 1), (3, 2)), ((3, 1), (3, 3)), ((3, 2), (0, 0)), ((3, 2), (0, 1)), ((3, 2), (0, 2)), ((3, 2), (0, 3)), ((3, 2), (1, 0)), ((3, 2), (1, 1)), ((3, 2), (1, 2)), ((3, 2), (1, 3)), ((3, 2), (2, 0)), ((3, 2), (2, 1)), ((3, 2), (2, 2)), ((3, 2), (2, 3)), ((3, 2), (3, 0)), ((3, 2), (3, 1)), ((3, 2), (3, 2)), ((3, 2), (3, 3)), ((3, 3), (0, 0)), ((3, 3), (0, 1)), ((3, 3), (0, 2)), ((3, 3), (0, 3)), ((3, 3), (1, 0)), ((3, 3), (1, 1)), ((3, 3), (1, 2)), ((3, 3), (1, 3)), ((3, 3), (2, 0)), ((3, 3), (2, 1)), ((3, 3), (2, 2)), ((3, 3), (2, 3)), ((3, 3), (3, 0)), ((3, 3), (3, 1)), ((3, 3), (3, 2)), ((3, 3), (3, 3))
# ]
#
# invalid_states = [((0, 0), (0, 0)), ((0, 0), (0, 1)), ((0, 0), (0, 2)), ((0, 0), (0, 3)), ((0, 0), (1, 0)), ((0, 0), (1, 1)), ((0, 0), (1, 2)), ((0, 0), (1, 3)), ((0, 0), (2, 0)), ((0, 0), (2, 1)), ((0, 0), (2, 2)), ((0, 0), (2, 3)), ((0, 0), (3, 0)), ((0, 0), (3, 1)), ((0, 0), (3, 2)), ((0, 0), (3, 3)), ((0, 1), (0, 0)), ((0, 1), (0, 1)), ((0, 1), (0, 2)), ((0, 1), (0, 3)), ((0, 1), (1, 0)), ((0, 1), (1, 1)), ((0, 1), (1, 2)), ((0, 1), (1, 3)), ((0, 1), (2, 0)), ((0, 1), (2, 1)), ((0, 1), (2, 2)), ((0, 1), (2, 3)), ((0, 1), (3, 0)), ((0, 1), (3, 1)), ((0, 1), (3, 2)), ((0, 1), (3, 3)), ((0, 2), (0, 0)), ((0, 2), (0, 1)), ((0, 2), (0, 2)), ((0, 2), (0, 3)), ((0, 2), (1, 0)), ((0, 2), (1, 1)), ((0, 2), (1, 2)), ((0, 2), (1, 3)), ((0, 2), (2, 0)), ((0, 2), (2, 1)), ((0, 2), (2, 2)), ((0, 2), (2, 3)), ((0, 2), (3, 0)), ((0, 2), (3, 1)), ((0, 2), (3, 2)), ((0, 2), (3, 3)), ((0, 3), (0, 0)), ((0, 3), (0, 1)), ((0, 3), (0, 2)), ((0, 3), (0, 3)), ((0, 3), (1, 0)), ((0, 3), (1, 1)), ((0, 3), (1, 2)), ((0, 3), (1, 3)), ((0, 3), (2, 0)), ((0, 3), (2, 1)), ((0, 3), (2, 2)), ((0, 3), (2, 3)), ((0, 3), (3, 0)), ((0, 3), (3, 1)), ((0, 3), (3, 2)), ((0, 3), (3, 3)), ((1, 0), (0, 0)), ((1, 0), (0, 1)), ((1, 0), (0, 2)), ((1, 0), (0, 3)), ((1, 0), (1, 0)), ((1, 0), (1, 1)), ((1, 0), (1, 2)), ((1, 0), (1, 3)), ((1, 0), (2, 0)), ((1, 0), (2, 1)), ((1, 0), (2, 2)), ((1, 0), (2, 3)), ((1, 0), (3, 0)), ((1, 0), (3, 1)), ((1, 0), (3, 2)), ((1, 0), (3, 3)), ((1, 1), (0, 0)), ((1, 1), (0, 1)), ((1, 1), (0, 2)), ((1, 1), (0, 3)), ((1, 1), (1, 0)), ((1, 1), (1, 1)), ((1, 1), (1, 2)), ((1, 1), (1, 3)), ((1, 1), (2, 0)), ((1, 1), (2, 1)), ((1, 1), (2, 2)), ((1, 1), (2, 3)), ((1, 1), (3, 0)), ((1, 1), (3, 1)), ((1, 1), (3, 2)), ((1, 1), (3, 3)), ((1, 2), (0, 0)), ((1, 2), (0, 1)), ((1, 2), (0, 2)), ((1, 2), (0, 3)), ((1, 2), (1, 0)), ((1, 2), (1, 1)), ((1, 2), (1, 2)), ((1, 2), (1, 3)), ((1, 2), (2, 0)), ((1, 2), (2, 1)), ((1, 2), (2, 2)), ((1, 2), (2, 3)), ((1, 2), (3, 0)), ((1, 2), (3, 1)), ((1, 2), (3, 2)), ((1, 2), (3, 3)), ((1, 3), (0, 0)), ((1, 3), (0, 1)), ((1, 3), (0, 2)), ((1, 3), (0, 3)), ((1, 3), (1, 0)), ((1, 3), (1, 1)), ((1, 3), (1, 2)), ((1, 3), (1, 3)), ((1, 3), (2, 0)), ((1, 3), (2, 1)), ((1, 3), (2, 2)), ((1, 3), (2, 3)), ((1, 3), (3, 0)), ((1, 3), (3, 1)), ((1, 3), (3, 2)), ((1, 3), (3, 3)), ((2, 0), (0, 0)), ((2, 0), (0, 1)), ((2, 0), (0, 2)), ((2, 0), (0, 3)), ((2, 0), (1, 0)), ((2, 0), (1, 1)), ((2, 0), (1, 2)), ((2, 0), (1, 3)), ((2, 0), (2, 0)), ((2, 0), (2, 1)), ((2, 0), (2, 2)), ((2, 0), (2, 3)), ((2, 0), (3, 0)), ((2, 0), (3, 1)), ((2, 0), (3, 2)), ((2, 0), (3, 3)), ((2, 1), (0, 0)), ((2, 1), (0, 1)), ((2, 1), (0, 2)), ((2, 1), (0, 3)), ((2, 1), (1, 0)), ((2, 1), (1, 1)), ((2, 1), (1, 2)), ((2, 1), (1, 3)), ((2, 1), (2, 0)), ((2, 1), (2, 1)), ((2, 1), (2, 2)), ((2, 1), (2, 3)), ((2, 1), (3, 0)), ((2, 1), (3, 1)), ((2, 1), (3, 2)), ((2, 1), (3, 3)), ((2, 2), (0, 0)), ((2, 2), (0, 1)), ((2, 2), (0, 2)), ((2, 2), (0, 3)), ((2, 2), (1, 0)), ((2, 2), (1, 1)), ((2, 2), (1, 2)), ((2, 2), (1, 3)), ((2, 2), (2, 0)), ((2, 2), (2, 1)), ((2, 2), (2, 2)), ((2, 2), (2, 3)), ((2, 2), (3, 0)), ((2, 2), (3, 1)), ((2, 2), (3, 2)), ((2, 2), (3, 3)), ((2, 3), (0, 0)), ((2, 3), (0, 1)), ((2, 3), (0, 2)), ((2, 3), (0, 3)), ((2, 3), (1, 0)), ((2, 3), (1, 1)), ((2, 3), (1, 2)), ((2, 3), (1, 3)), ((2, 3), (2, 0)), ((2, 3), (2, 1)), ((2, 3), (2, 2)), ((2, 3), (2, 3)), ((2, 3), (3, 0)), ((2, 3), (3, 1)), ((2, 3), (3, 2)), ((2, 3), (3, 3)), ((3, 0), (0, 0)), ((3, 0), (0, 1)), ((3, 0), (0, 2)), ((3, 0), (0, 3)), ((3, 0), (1, 0)), ((3, 0), (1, 1)), ((3, 0), (1, 2)), ((3, 0), (1, 3)), ((3, 0), (2, 0)), ((3, 0), (2, 1)), ((3, 0), (2, 2)), ((3, 0), (2, 3)), ((3, 0), (3, 0)), ((3, 0), (3, 1)), ((3, 0), (3, 2)), ((3, 0), (3, 3)), ((3, 1), (0, 0)), ((3, 1), (0, 1)), ((3, 1), (0, 2)), ((3, 1), (0, 3)), ((3, 1), (1, 0)), ((3, 1), (1, 1)), ((3, 1), (1, 2)), ((3, 1), (1, 3)), ((3, 1), (2, 0)), ((3, 1), (2, 1)), ((3, 1), (2, 2)), ((3, 1), (2, 3)), ((3, 1), (3, 0)), ((3, 1), (3, 1)), ((3, 1), (3, 2)), ((3, 1), (3, 3)), ((3, 2), (0, 0)), ((3, 2), (0, 1)), ((3, 2), (0, 2)), ((3, 2), (0, 3)), ((3, 2), (1, 0)), ((3, 2), (1, 1)), ((3, 2), (1, 2)), ((3, 2), (1, 3)), ((3, 2), (2, 0)), ((3, 2), (2, 1)), ((3, 2), (2, 2)), ((3, 2), (2, 3)), ((3, 2), (3, 0)), ((3, 2), (3, 1)), ((3, 2), (3, 2)), ((3, 2), (3, 3)), ((3, 3), (0, 0)), ((3, 3), (0, 1)), ((3, 3), (0, 2)), ((3, 3), (0, 3)), ((3, 3), (1, 0)), ((3, 3), (1, 1)), ((3, 3), (1, 2)), ((3, 3), (1, 3)), ((3, 3), (2, 0)), ((3, 3), (2, 1)), ((3, 3), (2, 2)), ((3, 3), (2, 3)), ((3, 3), (3, 0)), ((3, 3), (3, 1)), ((3, 3), (3, 2)), ((3, 3), (3, 3))]
#
# def test_total():
#     data = """The first floor contains a hydrogen-compatible microchip and a lithium-compatible microchip.
# The second floor contains a hydrogen generator.
# The third floor contains a lithium generator.
# The fourth floor contains nothing relevant.
# """
#     assert Solution(data).part_a() == 11
#
#
# @pytest.mark.parametrize(['start', 'expected'], zip(states, states[1:]))
# def test_neighbours(start, expected):
#     assert expected in start.neighbours()
#
#
# @pytest.mark.parametrize('state', valid_states)
# def test_valid_states(state):
#     print(state, state.is_valid())
#     assert state.is_valid()
